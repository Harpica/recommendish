name: CI-CD
on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

    workflow_dispatch:

jobs:
    push_to_docker_hub:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repo
              uses: actions/checkout@v2

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1

            - name: Login to DockerHub
              uses: docker/login-action@v1
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Build and push server
              uses: docker/build-push-action@v2
              with:
                  context: ./server
                  file: ./server/Dockerfile
                  push: true
                  tags: ${{ secrets.DOCKERHUB_USERNAME }}/recommendish-node:latest

            - name: Build and push client
              uses: docker/build-push-action@v2
              with:
                  context: ./client
                  build-args: |
                      REACT_APP_SERVER_URL=${{ vars.SERVER_URL }}
                      REACT_APP_SERVER_PORT=${{ vars.SERVER_PORT }}
                      REACT_APP_CLIENT_PORT=${{ vars.CLIENT_PORT }}
                  #   REACT_APP_SOCIALS_GITHUB_ID=${{ secrets.SOCIALS_GITHUB_ID }}
                  #   REACT_APP_SOCIALS_GITHUB_SECRET=${{ secrets.SOCIALS_GITHUB_SECRET }}
                  #   REACT_APP_SOCIALS_TWITTER_ID=${{ secrets.SOCIALS_TWITTER_ID }}
                  #   REACT_APP_SOCIALS_TWITTER_SECRET=${{ secrets.SOCIALS_TWITTER_SECRET }}
                  #   REACT_APP_SOCIALS_TWITTER_APP_KEY=${{ secrets.SOCIALS_TWITTER_APP_KEY }}
                  file: ./client/Dockerfile
                  push: true
                  tags: ${{ secrets.DOCKERHUB_USERNAME }}/recommendish-react:latest

    deploy:
        runs-on: ubuntu-latest
        needs: [push_to_docker_hub]

        steps:
            - name: Deploy to VPS
              env:
                  MONGODB_DATABASE_NAME: ${{ secrets.MONGODB_DATABASE_NAME }}
                  MONGODB_DATABASE_USERNAME: ${{ secrets.MONGODB_DATABASE_USERNAME }}
                  MONGODB_DATABASE_PASSWORD: ${{ secrets.MONGODB_DATABASE_PASSWORD }}
                  MONGODB_DATABASE_PORT: ${{ secrets.MONGODB_DATABASE_PORT }}
                  JWT_KEY: ${{ secrets.JWT_KEY }}
                  CLIENT_PORT: ${{ vars.CLIENT_PORT }}
                  BASE_URL: ${{ vars.BASE_URL }}
                  SERVER_PORT: ${{ vars.PORT }}
                  SOCIALS_GITHUB_ID: ${{ secrets.SOCIALS_GITHUB_ID }}
                  SOCIALS_GITHUB_SECRET: ${{ secrets.SOCIALS_GITHUB_SECRET }}
                  SOCIALS_TWITTER_APP_KEY: ${{ secrets.SOCIALS_TWITTER_APP_KEY }}
                  SOCIALS_TWITTER_APP_KEY_SECRET:
                      ${{ secrets.SOCIALS_TWITTER_APP_KEY_SECRET }}
                      # for OAuth 2.0
                  SOCIALS_TWITTER_ID: ${{ secrets.SOCIALS_TWITTER_ID }}
                  SOCIALS_TWITTER_SECRET: ${{ secrets.SOCIALS_TWITTER_SECRET }}
              uses: appleboy/ssh-action@master
              with:
                  envs: MONGODB_DATABASE_NAME,MONGODB_DATABASE_USERNAME,MONGODB_DATABASE_PASSWORD,MONGODB_DATABASE_PORT,CLIENT_PORT,BASE_URL,SERVER_PORT,JWT_KEY, SOCIALS_GITHUB_ID,SOCIALS_GITHUB_SECRET, SOCIALS_TWITTER_ID, SOCIALS_TWITTER_SECRET, SOCIALS_TWITTER_APP_KEY, SOCIALS_TWITTER_APP_KEY_SECRET
                  host: ${{ secrets.VPS_SSH_HOST }}
                  username: ${{ secrets.VPS_SSH_USERNAME }}
                  key: ${{ secrets.VPS_SSH_SECRET }}
                  port: ${{ secrets.VPS_SSH_PORT }}
                  script_stop: true
                  script: |
                      cd ./recommendish
                      git pull
                      echo "Pull new image"
                      echo "db port ${MONGODB_DATABASE_PORT}, node port ${SERVER_PORT}"
                      docker compose pull
                      echo "Restart the container"
                      docker compose up --force-recreate --build --no-deps -d
                      echo "Delete old image"
                      docker image prune -f
